#!/bin/bash
################################################################################
# Copyright (c) 2015 Nick Parry
#
# Modified by GuidoFe
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
################################################################################
# 
# Usage: lyrics [-s | -S] <url | ARTIST TITLE | sporify | mpd | mpv | rhythmbox | rbox>
#
################################################################################

# PATHS
# Don't write / at the end of folder paths
#
# Log file location
#
LOGFILE="log.txt"
#
# Folder that contains the saved lyrics
#
LYRICSFOLDER="$HOME/.lyrics"
#
################################################################################
#
mkdir -p $LYRICSFOLDER
#
# Setup some variables
USER_AGENT='Mozilla/5.0'
CURL="curl -s -A '$USER_AGENT'";
printf "\n\n\n########### `date` ##########\n" > $LOGFILE
################################################################################
# Function to get the text file name from a url
################################################################################

function urlToPath () {
    echo "$LYRICSFOLDER"'/'`echo $1 | rev | cut -d '/' -f 2 | rev | tr -d \[:blank:\]\[:punct:\]\[:cntrl:\]`'/'`echo $1 | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1 | tr -d \[:blank:\]\[:punct:\]\[:cntrl:\]`'.txt'
}

################################################################################
# Get filename from artist and title
################################################################################

function metaToPath () {
    echo "$LYRICSFOLDER"'/'`echo $1 | tr -d \[:punct:\]\[:blank:\]\[:cntrl:\] | tr \[:upper:\] \[:lower:\]`'/'`echo $2 | tr -d \[:punct:\]\[:blank:\]\[:cntrl:\]\ | tr \[:upper:\] \[:lower:\]`'.txt'
}

################################################################################
# Get author directory from path
################################################################################

function pathToDir () {
    echo `echo $1 | rev | cut -d '/' -f 1 --complement --output-delimiter '/' | rev`'/'
}

################################################################################
# Prints lyrics to stdout and to a file if requested
################################################################################

function printLyrics() {
    # printLyrics RESULT SAVE FILENAME
    SUCCESS=0
    # Replace some HTML character entities like &amp;
    LYR=`echo "$1" | sed 's/\&amp;/\&/g' | sed 's/\&dollar;/$/g'`
    if [[ $2 != 0 ]]; then
        if [ $2 = "1" -a ! -e $3 -o $2 = "2" ]; then
            if [ ! -d `pathToDir $3` ]; then
                mkdir `pathToDir $3`  
            fi
            echo "$LYR" > $3
            SUCCESS=$?
        fi
    fi
    echo $3 >> $LOGFILE
    echo "$LYR"
    exit $SUCCESS
}

################################################################################
# Use DuckDuckGo to get the url for the lyrics
################################################################################
function duck () {
    local TEMP
    Q=$@;
    echo $Q >> $LOGFILE
    #Q="$@";
    DUCK_URL="https://duckduckgo.com/html/?q="
    AGENT='Mozilla/4.0';
    STREAM=$(curl -A "$AGENT" -skLm 10 "${DUCK_URL}${Q//\ /+}");
    SUCCESS=$?
    TEMP=$(echo "$STREAM" | grep "$1.com" -m 1 | cut -d '"' -f 6 | cut -d "." -f 2- | tr -s "%2F" "/");
    echo "https://www."$TEMP;
    return $SUCCESS
}

################################################################################
# This is used to get the url for the lyrics
################################################################################
function google {
    Q="$@"
    GOOG_URL='https://www.google.com/search?tbs=li:1&q='
    AGENT="Mozilla/4.0"
    stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}")
    SUCCESS=$?
    echo "curl return code while retrieving google data: $SUCCESS" >> $LOGFILE
    echo "$stream" | grep -o "href=\"/url[^\&]*&amp;" | sed 's/href=".url.q=\([^\&]*\).*/\1/'
    return $SUCCESS
}

################################################################################
# Get the lyrics from plyrics
################################################################################
function do_it_plyrics() {
    # If we passed in a url
    if [[ "$1" == "--url" ]];then
        URL="$2"
    else
        ALL=$(google "$1 $2 lyrics site:plyrics.com");
        URL="$(echo $ALL | tr ' ' '\n' | grep "plyrics.com" -m 1)";
    fi

    if [[ -z "$URL" ]];then
        echo "There were no plyrics.com results. Giving up now :(" >> $LOGFILE;
        exit 1;
    fi
    # Print the artist and title we are going to look up
    # echo -e "($URL) $1 - $2: " >> $LOGFILE;
    # Run the curl and store the lyrics into a var
    # This uniq is sketchy, but if a song's lyrics are very similar, maybe I
    # don't care if we squash them anyways.
    RESULT="$($CURL $URL | awk '/start of lyric/, /end of lyric/' \
        | perl -pe 's/<.*?>//g' \
        | sed 's/^\s*//' \
        | sed 's/’//g' \
        | sed 's/‘//g' \
        | sed 's/”/"/g' \
        | sed 's/“/"/g' \
        | sed 's/…/.../g' \
        | sed 's/[fF][uU][cC][kK]/[32mF***[39m/g' \
        | sed 's/[sS][hH][iI][tT]/[32mS***[39m/g' \
        | sed "s/&#039;/'/g" \
        | sed 's/&rsquo;//g' \
        | sed 's/&quot;//g' \
        | uniq
    )"



    # If we didn't get anything, lets give up. This is the last option.
    if [[ -z "$RESULT" ]];then
        if [[ $1 = "--url" ]]; then
            echo "Can't find the webpage. Probably the link is incorrect or there is no connection" >> $LOGFILE
        else
            echo "That URL sucked. Giving up now :(" >> $LOGFILE;
        fi
        exit 1;

    # We found something
    else
        printLyrics "$RESULT" "$3" `urlToPath $URL` 
    fi

}

################################################################################
# Get the lyrics of a song by googling it, and parsing result pages
################################################################################
function do_it_songLyrics() {
    # If we passed in a url
    if [[ "$1" == "--url" ]];then
        URL="$2"
    else
        ALL=$(google "$1 $2 lyrics site:songlyrics.com");
        URL="$(echo $ALL | tr ' ' '\n' | grep "songlyrics.com" -m 1)";
    fi
    if [[ -z "$URL" ]];then
        echo "There were no songlyrics.com results. Trying plyrics now..." >> $LOGFILE;
        do_it_plyrics "$1" "$2"
        return $?;
    fi
    # Print the artist and title we are going to look up
    #echo -e "($URL) $1 - $2: " >> $LOGFILE;
    # Run the curl and store the lyrics into a var
    # This uniq is sketchy, but if a song's lyrics are very similar, maybe I
    # don't care if we squash them anyways.
    RESULT="$($CURL $URL | awk '/<p id=\"songLyricsDiv\"/, /<\/p>/' \
        | perl -pe 's/<.*?>//g' \
        | sed 's/^\s*//' \
        | sed 's/’//g' \
        | sed 's/‘//g' \
        | sed 's/”/"/g' \
        | sed 's/“/"/g' \
        | sed 's/…/.../g' \
        | sed 's/[fF][uU][cC][kK]/[32mF***[39m/g' \
        | sed 's/[sS][hH][iI][tT]/[32mS***[39m/g' \
        | sed "s/&#039;/'/g" \
        | sed 's/&rsquo;//g' \
        | sed 's/&quot;//g' \
        | uniq
    )"



    # If we didn't get anything, lets give up if we passed a url, or search in plyrics.
    if [[ -z "$RESULT" ]];then
        if [[ $1 = "--url" ]]; then
            echo "Can't find the webpage. Probably the link is incorrect or there is no connection" >> $LOGFILE
        else
            echo "That URL sucked. Trying plyrics now..." >> $LOGFILE
            do_it_plyrics "$1" "$2"
        fi
        exit 1;

    # We found something
    else
        printLyrics "$RESULT" "$3" `urlToPath $URL`
    fi

}

################################################################################
# The a-z lyrics method
################################################################################
function do_it_azlyrics() {
    # If we passed it a url, lets just get it
    if [[ "$1" == '--url' ]];then
        URL="$2"
    else
        # Or, lets google it and get one
        #ALL=$(google "$1 $2 lyrics site:azlyrics.com");
        #URL="$(echo $ALL | tr ' ' '\n' | grep "azlyrics.com" -m 1)";
        # Let's use DuckDuckGo instead! :)
        URL=$(duck "azlyrics" "$1 $2 lyrics");
        echo "Duck call exited with code $?" >> $LOGFILE
        echo "Duck url: " $URL >> $LOGFILE
    fi

    if [[ -z "$URL" ]];then
        echo "Zero url. URL = " $URL >> $LOGFILE
        echo "There was no azlyrics.com results. Lets try songlyrics.com..." >> $LOGFILE;
        #do_it_azlyrics "$1" "$2"
        do_it_songLyrics "$1" "$2"
        exit 1;
    fi

    # Print the artist and title we are going to look up
    # echo -e "($URL) $1 - $2: " >> $LOGFILE;
    # Run the curl and store the lyrics into a var
    # This uniq is sketchy, but if a song's lyrics are very similar, maybe I
    # don't care if we squash them anyways.
        # The old method
        #| awk '/<!-- Usage of azlyrics.com content by any third-party lyrics provider is prohibited by our licensing agreement. Sorry about that. -->/, /<!-- MxM banner -->/' \
    RESULT="$($CURL $URL \
        | awk '/<!-- Usage of azlyrics.com content by any third-party lyrics provider is prohibited by our licensing agreement. Sorry about that. -->/, /<\/div>/' \
        | perl -pe 's/<.*?>//g' \
        | sed 's/^\s*//' \
        | sed 's/’//g' \
        | sed 's/‘//g' \
        | sed 's/”/"/g' \
        | sed 's/“/"/g' \
        | sed 's/…/.../g' \
        | sed 's/[fF][uU][cC][kK]/[32mF***[39m/g' \
        | sed 's/[sS][hH][iI][tT]/[32mS***[39m/g' \
        | sed "s/&#039;/'/g" \
        | sed 's/&rsquo;//g' \
        | sed 's/&quot;//g' \
        | uniq
    )";

     # If we didn't get anything, lets give up if we passed a url, or search in songLyrics
    if [[ -z "$RESULT" ]];then
        echo "Result null. Result: $RESULT" >> $LOGFILE
        if [[ "$1" == '--url' ]]; then
            echo "Can't find the webpage. Probably the link is incorrect or there is no connection" >> $LOGFILE
        else
            echo "That URL sucked. Lets try songlyrics.com..." >> $LOGFILE;
            do_it_songLyrics "$1" "$2"
        fi
        exit 1;

    # We found something, print it
    else
        #echo "Printing lyrics" >> $LOGFILE
        printLyrics "$RESULT" "$3" `urlToPath $URL`
    fi


}
################################################################################
# Look up the title and artist in spotify
# Sets the global ARTIST and TITLE varibles
################################################################################
function lookupSpotifyInfo() {
    # Checks $OSTYPE to determine the proper command for artist/title query
    if [[ "$OSTYPE" == "linux-gnu" ]];then
      ARTIST="$(dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' | grep -A 3 artist | grep string | grep -v xesam | sed 's/^\s*//' | cut -d ' ' -f 2- | tr '(' ' ' | tr ')' ' ' | tr '"' ' ' )";

      TITLE="$(dbus-send --print-reply --session --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' | grep -A 3 title | grep string | grep -v xesam | sed 's/^\s*//' | sed 's/^variant\s*//' | cut -d ' ' -f 2- | tr '(' ' ' | tr ')' ' ' | tr '"' ' ' )";

    elif [[ "$OSTYPE" == "darwin"* ]];then
      ARTIST="$(osascript -e 'tell application "Spotify" to artist of current track as string')";

      TITLE="$(osascript -e 'tell application "Spotify" to name of current track as string')";

    else
      echo "Your OS doesn't appear to be supported" >> $LOGFILE
    fi

    if [[ -z "$ARTIST" || -z "$TITLE" ]];then
        echo "There was a problem getting the currently playing info from spotify" >> $LOGFILE;
        exit 1;
    fi

}

################################################################################
# Look up the song info for the currently playing song in Rhythmbox
# Sets the global ARTIST and TITLE varibles
################################################################################
function lookupRhythmboxInfo() {
    # This is a nasty one-liner that returns data like this:
    # string "artist"
    # variant             string "City and Colour"
    # --
    # string "title"
    # variant             string "Like Knives"

    ALL="$(dbus-send --print-reply --dest=org.gnome.Rhythmbox /org/gnome/Rhythmbox/Shell org.gnome.Rhythmbox.Shell.getSongProperties string:$(dbus-send --print-reply --dest=org.gnome.Rhythmbox /org/gnome/Rhythmbox/Player org.gnome.Rhythmbox.Player.getPlayingUri | grep string | sed 's/^\s*//g' | cut -d ' ' -f 2 | sed 's/"//g') | sed 's/^\s*//' | grep 'string "artist"\|string "title"' -A 1)";

    # Get the Artist out of the dbus call
    ARTIST="$(echo  "$ALL" | grep artist -A 1  | grep variant | cut -d ' ' -f 15- | sed 's/"//g')";
    # Get the Title out of the dbus call
    TITLE="$(echo "$ALL" | grep title -A 1  | grep variant | cut -d ' ' -f 15- | sed 's/"//g')";

}

################################################################################
# Look up the song info for the currently playing song in mpv
# Sets the global ARTIST and TITLE varibles
################################################################################
function lookupMpvInfo() {

    ALL="$(ps -u | less | grep -v 'lyrics' | grep -v 'vim' | grep -v 'grep' | grep 'mpv' | head -n1 | cut -d '-' -f 3- | cut -d ' ' -f 2- | cut -d '-' -f -2 | head -c -2)";

    # Get the Artist
    ARTIST="$(echo "$ALL" | cut -d '-' -f -1 | head -c -2)";
    # Get the Title
    TITLE="$(echo "$ALL" | cut -d '-' -f 2 | tail -c +2 | cut -d '(' -f 1)";

}

################################################################################
# Look up the song info for the currently playing song in mpd. It requires mpc.
# Sets the global ARTIST and TITLE variables
################################################################################
function lookupMpdInfo() {
    #Check if mpc is installed
    if ! type "mpc" > /dev/null; then
        echo "To use this program with mpd, please install mpc.\n" >> $LOGFILE
        echo "To install it on Ubuntu: sudo apt install mpc\n" >> $LOGFILE
        echo "To install it on Arch: sudo pacman -S mpc\n" >> $LOGFILE
        exit 1
    else
        # Get the Artist
        ARTIST=`mpc current | head -n 1 | cut -d '-' -f 1 | awk '{$1=$1};1'`
        # Get the Title
        TITLE=`mpc current | head -n 1 | cut -d '-' -f 2 | awk '{$1=$1};1'`
    fi
}
################################################################################
# Usage info
################################################################################
function usage() {
    echo "$(basename $0) - Find out the songlyrics for a currently playing song." >> $LOGFILE
    echo "This script is capable of finding out the Artist and Title of the currently" >> $LOGFILE
    echo "playing song. If, you are using Rhythmbox or Spotify. See usage message below." >> $LOGFILE
    echo >> $LOGFILE
    echo "Do it like this:" >> $LOGFILE
    echo "$(basename $0) <artist> <title>       - To display lyrics for a song" >> $LOGFILE
    echo "$(basename $0) spotify                - To look up info for the currently playing song in Spotify" >> $LOGFILE
    echo "$(basename $0) rhythmbox|rbox         - To look up info for the currently playing song in Rhythmbox" >> $LOGFILE
    echo "$(basename $0) mpv                    - To look up info for the currently playing song in mpv" >> $LOGFILE
    echo "$(basename $0) mpd                    - To look up info for the currently playing song in mpd" >> $LOGFILE
    echo "$(basename $0) <songlyrics.com url>   - To display the lyrics from a given songlyrics.com url" >> $LOGFILE
    echo "$(basename $0) <azlyrics.com url>     - To display the lyrics from a given songlyrics.com url" >> $LOGFILE
    echo "After $(basename $0), insert -S if you want to save the text on your pc, overwriting existing files with the same name, or -s to save without overwriting." >> $LOGFILE
    echo "Example: $(basename $0) -S mpd" >> $LOGFILE
    # Print the args if any were passed
    if [[ -n "$1" ]];then
        echo -e "\nERROR:\n$1" >> $LOGFILE
    fi
    exit 1;
}
################################################################################
# Main (Arg parsing crap)
################################################################################
########################################
# Check if is requested to save the lyrics
########################################
SAVE=0
arg1=$1
arg2=$2
if [[ $1 = '-s' || $1 = '-S' ]]; then
    if [[ $1 = '-s' ]]; then
        SAVE=1
    else
        SAVE=2
    fi
    arg1=$2
    arg2=$3
fi

echo "SAVE=$SAVE|" >> $LOGFILE
echo "Arg1=$arg1|" >> $LOGFILE
echo "Arg2=$arg2|" >> $LOGFILE
########################################
# If given a songlyrics url 
########################################
if [[ "$(echo $arg1 | grep 'http.*://.*songlyrics.com' -i)" ]];then
    if [[ $SAVE != 2 && -f `urlToPath "$arg1"` ]]; then
        echo `urlToPath "$arg1"` > /tmp/songName
        cat `urlToPath "$arg1"`
        exit $?
    else
        do_it_songLyrics --url "$arg1" "$SAVE"
    fi

########################################
# Or an azlyrics url
########################################
elif [[ "$(echo $arg1 | grep -i 'http.*://.*azlyrics.com')" ]];then
    if [[ $SAVE != 2 && -f `urlToPath "$arg1"` ]]; then
        echo `urlToPath "$arg1"` > /tmp/songName
        cat `urlToPath "$arg1"`
        exit $?
    else
        do_it_azlyrics --url "$arg1" "$SAVE"
    fi

########################################
# Or a plyrics url
########################################
elif [[ "$(echo $arg1 | grep 'http.*://.*plyrics.com' -i)" ]];then
    echo `urlToPath "$arg1"` > /tmp/songName
    if [[ $SAVE != 2 && -f `urlToPath "$arg1"` ]]; then
        cat `urlToPath "$arg1"`
        exit $?
    else
        do_it_plyrics --url "$arg1" "$SAVE"
    fi

########################################
# look up the lyrics using the mpv
########################################
elif [[ "$arg1" == 'mpv' ]]; then
    lookupMpvInfo
    #echo "Looking up title by mpv artist and title..." >> $LOGFILE;
    #echo "Artist: $ARTIST" >> $LOGFILE;
    #echo "TITLE: $TITLE" >> $LOGFILE;
    #Load the lirycs from file if it exists and if the option -S is not set
    echo `metaToPath "$ARTIST" "$TITLE"` > /tmp/songName
    if [[ $SAVE != 2 && -f `metaToPath "$ARTIST" "$TITLE"` ]]; then
        cat `metaToPath "$ARTIST" "$TITLE"`
        exit $?
    else
        do_it_azlyrics "$ARTIST" "$TITLE" "$SAVE";
    fi

########################################
# look up the lyrics using the mpd
########################################
elif [[ "$arg1" == 'mpd' ]]; then
    lookupMpdInfo
    echo "Looking up title by mpd artist and title..." >> $LOGFILE;
    echo "Artist: $ARTIST" >> $LOGFILE;
    echo "TITLE: $TITLE" >> $LOGFILE;

    echo `metaToPath "$ARTIST" "$TITLE"` > /tmp/songName
    #Load the lirycs from file if it exists and if the option -S is not set
    if [[ $SAVE != 2 && -f `metaToPath "$ARTIST" "$TITLE"` ]]; then
        cat `metaToPath "$ARTIST" "$TITLE"`
        exit $?
    else
        echo "Trying azlyrics" >> $LOGFILE
        do_it_azlyrics "$ARTIST" "$TITLE" "$SAVE";
    fi

########################################
# look up the lyrics using the Rhythmbox dbus api
########################################
elif [[ "$arg1" == 'rhythmbox' || "$arg1" == 'rbox' ]]; then
    lookupRhythmboxInfo
    #echo "Looking up title by Rhythmbox artist and title..." >> $LOGFILE;
    #echo "Artist: $ARTIST" >> $LOGFILE;
    #echo "TITLE: $TITLE" >> $LOGFILE;

    echo `metaToPath "$ARTIST" "$TITLE"` > /tmp/songName
    #Load the lirycs from file if it exists and if the option -S is not set
    if [[ $SAVE != 2 && -f `metaToPath "$ARTIST" "$TITLE"` ]]; then
        cat `metaToPath "$ARTIST" "$TITLE"`
        exit $?
    else
        do_it_azlyrics "$ARTIST" "$TITLE" "$SAVE";
    fi

########################################
# look up the lyrics from the currently playing spotify song
########################################
elif [[ "$arg1" == 'spotify' ]]; then
    # Sets the global ARTIST and TITLE vars
    lookupSpotifyInfo
    #echo "Looking up title by Spotify artist and title..." >> $LOGFILE;
    #echo "Artist: $ARTIST" >> $LOGFILE;
    #echo "Title: $TITLE" >> $LOGFILE;

    echo `metaToPath "$ARTIST" "$TITLE"` > /tmp/songName
    #Load the lirycs from file if it exists and if the option -S is not set
    if [[ $SAVE != 2 && -f `metaToPath "$ARTIST" "$TITLE"` ]]; then
        cat `metaToPath "$ARTIST" "$TITLE"`
        exit $?
    else
        do_it_azlyrics "$ARTIST" "$TITLE" "$SAVE";
    fi

########################################
# Artist Title args to look up
########################################
elif [[ -n "$arg1" && -n "$arg2" ]];then
    
    echo `metaToPath "$ARTIST" "$TITLE"` > /tmp/songName
    #Load the lirycs from file if it exists and if the option -S is not set
    if [[ $SAVE != 2 && -f `metaToPath "$ARTIST" "$TITLE"` ]]; then
        cat `metaToPath "$arg1" "$arg2"`
        exit $?
    else
        do_it_azlyrics "$arg1" "$arg2" "$SAVE";
    fi
else
    usage 
    return 1
fi

